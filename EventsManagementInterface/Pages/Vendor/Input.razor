@page "/vendor/input"
@using EventsManagementInterface.Data.Models
@using EventsManagementInterface.Data.Models.Vendor
@using EventsManagementInterface.Data.Services
@using EventsManagementInterface.Data.Enums
@inject VendorService vendorService

<PageTitle>Vendor Input</PageTitle>
<form @onsubmit="SubmitVendorInput">
    <div class="card-custom p-3">
        <div class="card-body-custom">
            <div class="row mb-3  justify-content-center mt-2">
                <div class="form-group col-lg-2 col-md-4 col-sm-4 text-center">
                    <h4>@vendorInput.GuestIdentificationNumber</h4>
                    @*<label for="vendorInputGuestIndentificationNumber">GIN</label>*@
                    @*<input type="number" min="1000" max="9999" class="form-control text-center" id="vendorInputGuestIndentificationNumber" @bind-value="vendorInput.GuestIdentificationNumber">*@
                </div>
                <div class="form-group col-lg-12 col-sm-12">
                    <div class="row justify-content-center mt-2">
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(1)">1</button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(2)">2</button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(3)">3</button>
                    </div>
                    <div class="row justify-content-center mt-2">
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(4)">4</button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(5)">5</button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(6)">6</button>
                    </div>
                    <div class="row justify-content-center mt-2">
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(7)">7</button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(8)">8</button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(9)">9</button>
                    </div>
                    <div class="row justify-content-center mt-2">
                        <button class="vendor-input-button" type="button" style="background-color: darkred !important;" @onclick="() => ClearInput()"><span class="oi oi-x" aria-hidden="true"></span></button>
                        <button class="vendor-input-button" type="button" @onclick="() => InsertGuestIdentificationNumber(0)">0</button>
                        <button class="vendor-input-button" type="button" style="background-color: orange !important;" @onclick="() => CheckTokenAllowance()"><span class="oi oi-magnifying-glass" aria-hidden="true"></span></button>
                    </div>
                    <div class="row justify-content-center mt-2">                        
                        <button class="vendor-input-token-button" type="button" style="background-color: grey !important;" @onclick="() => ShowMenuModal()">Drink Menu</button>
                        <button class="vendor-input-token-button" type="button" style="background-color: grey !important;" @onclick="() => AddFoodToken(Food.FOOD_GENERIC)">Food Token <br /><b>@foodOrder[Food.FOOD_GENERIC]</b></button>
                    </div>
                    <div class="row justify-content-center mt-2">                        
                        <button class="vendor-input-submit-button" type="button" style="background-color: darkgreen !important;" @onclick="() => SubmitVendorInput()"><span class="oi oi-check" aria-hidden="true"></span></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<Modal @ref="modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@baseModal.Title</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel Style="font-weight:100">@baseModal.Message</FieldLabel>
            </Field>
            <Div Class="mb-2"></Div>
            @if (baseModal.Success)
            {
                <Field>
                    <FieldLabel>Tokens Remaining:</FieldLabel>
                    <UnorderedList>
                        @foreach (string tokens in baseModal.TokensRemaining)
                        {
                            <UnorderedListItem>@tokens</UnorderedListItem>
                        }
                    </UnorderedList>
                </Field>
            }
            else
            {
                <Field>
                    <UnorderedList>
                        @foreach (string error in baseModal.Errors)
                        {
                            <UnorderedListItem>@error</UnorderedListItem>
                        }
                    </UnorderedList>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Modal @ref="menuModal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Menu</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <div class="mt-2 text-center">
                <h5>Beers - Draught</h5>
            </div>
            <div class="row justify-content-center mt-2">
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.MADRI_LAGER_PINT)">Madri Lager (Pint)<br /><b>@alcoholDrinkOrder[Drink.MADRI_LAGER_PINT]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.NECK_OIL_IPA_PINT)">Neck Oil IPA (Pint)<br /><b>@alcoholDrinkOrder[Drink.NECK_OIL_IPA_PINT]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.MADRI_LAGER_HALF_PINT)">Madri Lager (Half-pint)<br /><b>@alcoholDrinkOrder[Drink.MADRI_LAGER_HALF_PINT]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.NECK_OIL_IPA_HALF_PINT)">Neck Oil IPA (Half-pint)<br /><b>@alcoholDrinkOrder[Drink.NECK_OIL_IPA_HALF_PINT]</b></button>
            </div>

            <div class="mt-3 text-center">
                <h5>Beers & Ciders - Bottles</h5>
            </div>
            <div class="row justify-content-center mt-2">
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddNonAlcoholDrinkToken(Drink.HEINEKEN_ZERO)">Heineken Zero<br /><b>@nonAlcoholDrinkOrder[Drink.HEINEKEN_ZERO]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.ASPALLS_CIDER)">Aspalls Cider<br /><b>@alcoholDrinkOrder[Drink.ASPALLS_CIDER]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.KOPPARBERG_MIXED_FRUITS)">Kopparberg - Mixed Fruits<br /><b>@alcoholDrinkOrder[Drink.KOPPARBERG_MIXED_FRUITS]</b></button>
            </div>

            <div class="mt-3 text-center">
                <h5>Spirits & Mixers</h5>
            </div>
            <div class="row justify-content-center mt-2">
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.SMIRNOFF_RED_VODKA)">Smirnoff Red Vodka<br /><b>@alcoholDrinkOrder[Drink.SMIRNOFF_RED_VODKA]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.GORDONS_GIN)">Gordons Gin<br /><b>@alcoholDrinkOrder[Drink.GORDONS_GIN]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.BACARDI)">Bacardi<br /><b>@alcoholDrinkOrder[Drink.BACARDI]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.JACK_DANIELS)">Jack Daniels<br /><b>@alcoholDrinkOrder[Drink.JACK_DANIELS]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.MORGANS_SPICED_RUM)">Morgan's Spiced Rum<br /><b>@alcoholDrinkOrder[Drink.MORGANS_SPICED_RUM]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.MALIBU)">Malibu<br /><b>@alcoholDrinkOrder[Drink.MALIBU]</b></button>
            </div>

            <div class="mt-3 text-center">
                <h5>Specialist Drinks</h5>
            </div>
            <div class="row justify-content-center mt-2">
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.GORDONS_PINK_GIN)">Gordons Pink Gin<br /><b>@alcoholDrinkOrder[Drink.GORDONS_PINK_GIN]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.WHITLEY_NEILL_SELECTION)">Whitley Neill Selection<br /><b>@alcoholDrinkOrder[Drink.WHITLEY_NEILL_SELECTION]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.PIMMS_AND_LEMONADE)">Pimms & Lemonade<br /><b>@alcoholDrinkOrder[Drink.PIMMS_AND_LEMONADE]</b></button>
            </div>

            <div class="mt-3 text-center">
                <h5>Soft Drinks</h5>
            </div>
            <div class="row justify-content-center mt-2">
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddNonAlcoholDrinkToken(Drink.LEMONADE)">Lemonade<br /><b>@nonAlcoholDrinkOrder[Drink.LEMONADE]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddNonAlcoholDrinkToken(Drink.COKE)">Coke<br /><b>@nonAlcoholDrinkOrder[Drink.COKE]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddNonAlcoholDrinkToken(Drink.FRUIT_SHOOT)">Fruit Shoot<br /><b>@nonAlcoholDrinkOrder[Drink.FRUIT_SHOOT]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddNonAlcoholDrinkToken(Drink.ORANGE)">Orange<br /><b>@nonAlcoholDrinkOrder[Drink.ORANGE]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddNonAlcoholDrinkToken(Drink.WATER)">Water<br /><b>@nonAlcoholDrinkOrder[Drink.WATER]</b></button>
            </div>

            <div class="mt-3 text-center">
                <h5>Wines & Fizz</h5>
            </div>
            <div class="row justify-content-center mt-2">
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.PROSECCO)">Prosecco<br /><b>@alcoholDrinkOrder[Drink.PROSECCO]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.RED_WINE)">Red Wine<br /><b>@alcoholDrinkOrder[Drink.RED_WINE]</b></button>
                <button class="vendor-input-menu-button" type="button" @onclick="() => AddAlcoholDrinkToken(Drink.WHITE_WINE)">White Wine<br /><b>@alcoholDrinkOrder[Drink.WHITE_WINE]</b></button>
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideMenuModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private VendorInput vendorInput;
    private Modal modal;
    private Modal menuModal;
    private BaseModal baseModal;
    private List<Order> orders = new List<Order>();
    Dictionary<Drink, int> alcoholDrinkOrder = new Dictionary<Drink, int>();
    Dictionary<Drink, int> nonAlcoholDrinkOrder = new Dictionary<Drink, int>();
    Dictionary<Food, int> foodOrder = new Dictionary<Food, int>();

    protected override async Task OnInitializedAsync()
    {
        vendorInput = new VendorInput();
        baseModal = new BaseModal();
        baseModal.Errors = new List<string>();

        alcoholDrinkOrder.Add(Drink.MADRI_LAGER_PINT, 0);
        alcoholDrinkOrder.Add(Drink.MADRI_LAGER_HALF_PINT, 0);
        alcoholDrinkOrder.Add(Drink.NECK_OIL_IPA_PINT, 0);
        alcoholDrinkOrder.Add(Drink.NECK_OIL_IPA_HALF_PINT, 0);
        alcoholDrinkOrder.Add(Drink.ASPALLS_CIDER, 0);
        alcoholDrinkOrder.Add(Drink.KOPPARBERG_MIXED_FRUITS, 0);
        alcoholDrinkOrder.Add(Drink.SMIRNOFF_RED_VODKA, 0);
        alcoholDrinkOrder.Add(Drink.GORDONS_GIN, 0);
        alcoholDrinkOrder.Add(Drink.BACARDI, 0);
        alcoholDrinkOrder.Add(Drink.JACK_DANIELS, 0);
        alcoholDrinkOrder.Add(Drink.MORGANS_SPICED_RUM, 0);
        alcoholDrinkOrder.Add(Drink.MALIBU, 0);
        alcoholDrinkOrder.Add(Drink.GORDONS_PINK_GIN, 0);
        alcoholDrinkOrder.Add(Drink.WHITLEY_NEILL_SELECTION, 0);
        alcoholDrinkOrder.Add(Drink.PIMMS_AND_LEMONADE, 0);
        alcoholDrinkOrder.Add(Drink.PROSECCO, 0);
        alcoholDrinkOrder.Add(Drink.RED_WINE, 0);
        alcoholDrinkOrder.Add(Drink.WHITE_WINE, 0);
        nonAlcoholDrinkOrder.Add(Drink.HEINEKEN_ZERO, 0);
        nonAlcoholDrinkOrder.Add(Drink.LEMONADE, 0);
        nonAlcoholDrinkOrder.Add(Drink.COKE, 0);
        nonAlcoholDrinkOrder.Add(Drink.FRUIT_SHOOT, 0);        
        nonAlcoholDrinkOrder.Add(Drink.ORANGE, 0);
        nonAlcoholDrinkOrder.Add(Drink.WATER, 0);
        foodOrder.Add(Food.FOOD_GENERIC, 0);
    }

    private Task ShowModal()
    {
        return modal.Show();
    }

    private Task HideModal()
    {
        return modal.Hide();
    }

    private Task ShowMenuModal()
    {
        return menuModal.Show();
    }

    private Task HideMenuModal()
    {
        return menuModal.Hide();
    }

    private async Task CheckTokenAllowance()
    {
        baseModal = await vendorService.CheckTokenAllowance(vendorInput);
        ShowModal();
    }    

    public async Task SubmitVendorInput()
    {
        foreach (var order in alcoholDrinkOrder)
        {
            if (order.Value > 0)
            {
                vendorInput.AlcoholicDrinkToken += order.Value;

                Order odr = new Order()
                {
                    Name = order.Key.ToString(),
                    Type = OrderType.ALCOHOL,
                    Quantity = order.Value                        
                };

                orders.Add(odr);
            }
        }

        foreach (var order in nonAlcoholDrinkOrder)
        {
            if (order.Value > 0)
            {
                vendorInput.NonAlcoholicDrinkToken += order.Value;

                Order odr = new Order()
                {
                    Name = order.Key.ToString(),
                    Type = OrderType.NON_ALCOHOL,
                    Quantity = order.Value,
                    CreatedDateTime = DateTime.Now
                };

                orders.Add(odr);
            }
        }

        foreach (var order in foodOrder)
        {
            if (order.Value > 0)
            {
                vendorInput.FoodToken += order.Value;

                Order odr = new Order()
                {
                    Name = order.Key.ToString(),
                    Type = OrderType.FOOD,
                    Quantity = order.Value,
                    CreatedDateTime = DateTime.Now
                };

                orders.Add(odr);
            }
        }

        baseModal = await vendorService.SubmitVendorInput(vendorInput, orders);

        ShowModal();

        if (baseModal.Success)
        {
            ClearOrders();
            vendorInput = new VendorInput();

        }

        vendorInput.AlcoholicDrinkToken = 0;
        vendorInput.NonAlcoholicDrinkToken = 0;
    }

    private void InsertGuestIdentificationNumber(int input) {
        int? integer = null;

        if (vendorInput.GuestIdentificationNumber > 999)
        {
            vendorInput.GuestIdentificationNumber = 0;
            return;
        }

        if (vendorInput.GuestIdentificationNumber == 0)
        {
            integer = int.Parse(vendorInput.GuestIdentificationNumber.ToString() + input.ToString());
            vendorInput.GuestIdentificationNumber = integer.Value;
        }
        else
        {
            vendorInput.GuestIdentificationNumber = int.Parse(vendorInput.GuestIdentificationNumber.ToString() + input.ToString());
        }
    }

    private void ClearOrders()
    {
        alcoholDrinkOrder = new Dictionary<Drink, int>();
        nonAlcoholDrinkOrder = new Dictionary<Drink, int>();
        foodOrder = new Dictionary<Food, int>();

        alcoholDrinkOrder.Add(Drink.MADRI_LAGER_PINT, 0);
        alcoholDrinkOrder.Add(Drink.MADRI_LAGER_HALF_PINT, 0);
        alcoholDrinkOrder.Add(Drink.NECK_OIL_IPA_PINT, 0);
        alcoholDrinkOrder.Add(Drink.NECK_OIL_IPA_HALF_PINT, 0);
        alcoholDrinkOrder.Add(Drink.ASPALLS_CIDER, 0);
        alcoholDrinkOrder.Add(Drink.KOPPARBERG_MIXED_FRUITS, 0);
        alcoholDrinkOrder.Add(Drink.SMIRNOFF_RED_VODKA, 0);
        alcoholDrinkOrder.Add(Drink.GORDONS_GIN, 0);
        alcoholDrinkOrder.Add(Drink.BACARDI, 0);
        alcoholDrinkOrder.Add(Drink.JACK_DANIELS, 0);
        alcoholDrinkOrder.Add(Drink.MORGANS_SPICED_RUM, 0);
        alcoholDrinkOrder.Add(Drink.MALIBU, 0);
        alcoholDrinkOrder.Add(Drink.GORDONS_PINK_GIN, 0);
        alcoholDrinkOrder.Add(Drink.WHITLEY_NEILL_SELECTION, 0);
        alcoholDrinkOrder.Add(Drink.PIMMS_AND_LEMONADE, 0);
        alcoholDrinkOrder.Add(Drink.PROSECCO, 0);
        alcoholDrinkOrder.Add(Drink.RED_WINE, 0);
        alcoholDrinkOrder.Add(Drink.WHITE_WINE, 0);
        nonAlcoholDrinkOrder.Add(Drink.HEINEKEN_ZERO, 0);
        nonAlcoholDrinkOrder.Add(Drink.LEMONADE, 0);
        nonAlcoholDrinkOrder.Add(Drink.COKE, 0);
        nonAlcoholDrinkOrder.Add(Drink.FRUIT_SHOOT, 0);
        nonAlcoholDrinkOrder.Add(Drink.ORANGE, 0);
        nonAlcoholDrinkOrder.Add(Drink.WATER, 0);
        foodOrder.Add(Food.FOOD_GENERIC, 0);
    }

    private void ClearInput()
    {
        vendorInput.GuestIdentificationNumber = 0;
        vendorInput.AlcoholicDrinkToken = 0;
        vendorInput.NonAlcoholicDrinkToken = 0;
        vendorInput.FoodToken = 0;
        ClearOrders();
    }

    private void AddAlcoholDrinkToken(Drink drink)
    {
        if (alcoholDrinkOrder[drink] == 10)
        {
            alcoholDrinkOrder[drink] = 0;
        }
        else
        {
            alcoholDrinkOrder[drink] = alcoholDrinkOrder[drink] + 1;
        }
    }

    private void AddNonAlcoholDrinkToken(Drink drink)
    {
        if (nonAlcoholDrinkOrder[drink] == 10)
        {
            nonAlcoholDrinkOrder[drink] = 0;
        }
        else
        {
            nonAlcoholDrinkOrder[drink] = nonAlcoholDrinkOrder[drink] + 1;
        }
    }

    private void AddFoodToken(Food food)
    {
        if (foodOrder[food] == 10)
        {
            foodOrder[food] = 0;
        }
        else
        {
            foodOrder[food] = foodOrder[food] + 1;
        }
    }
}

