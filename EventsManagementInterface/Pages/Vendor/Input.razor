@page "/vendor/input"
@using EventsManagementInterface.Data.Models
@using EventsManagementInterface.Data.Models.Vendor
@using EventsManagementInterface.Data.Services
@inject VendorService vendorService

<PageTitle>Vendor Input</PageTitle>
<h1 class="mb-5">Vendor</h1>
<form @onsubmit="SubmitVendorInput">
    <div class="card-custom p-3">
        <div class="card-body-custom">
            <div class="row mb-3">
                <div class="form-group col-lg-12 col-sm-12">
                    <label for="vendorInputGuestIndentificationNumber">Guest Identification Number</label>
                    <input type="number" min="1000" max="9999" class="form-control" id="vendorInputGuestIndentificationNumber" @bind-value="vendorInput.GuestIdentificationNumber">
                </div>
                <div class="form-group col-lg-12 col-sm-12">
                    <label for="vendorInputAlcoholicDrinks">Alcoholic Drink(s)</label>
                    <select class="form-control" id="vendorInputAlcoholicDrinks" @bind="vendorInput.AlcoholicDrinkToken">
                        <option selected="selected">0</option>
                        @for (int i = 1; i < 11; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div class="form-group col-lg-12 col-sm-12">
                    <label for="vendorInputNonAlcoholicDrinks">Non-Alcoholic Drink(s)</label>
                    <select class="form-control" id="vendorInputNonAlcoholicDrinks" @bind="vendorInput.NonAlcoholicDrinkToken">
                        <option selected="selected">0</option>
                        @for (int i = 1; i < 11; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div class="form-group col-lg-12 col-sm-12">
                    <label for="vendorInputFood">Food</label>
                    <select class="form-control" id="vendorInputFood" @bind="vendorInput.FoodToken">
                        <option selected="selected">0</option>
                        @for (int i = 1; i < 11; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
            </div>

            <input type="submit" class="btn btn-primary" value="Submit" />
        </div>
    </div>
</form>

<Modal @ref="modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@baseModal.Title</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel Style="font-weight:100">@baseModal.Message</FieldLabel>
            </Field>
            <Div Class="mb-2"></Div>
            @if (baseModal.Success)
            {
                <Field>
                    <FieldLabel>Tokens Remaining:</FieldLabel>
                    <UnorderedList>
                        @foreach (string tokens in baseModal.TokensRemaining)
                        {
                            <UnorderedListItem>@tokens</UnorderedListItem>
                        }
                    </UnorderedList>
                </Field>
            }
            else
            {
                <Field>
                    <UnorderedList>
                        @foreach (string error in baseModal.Errors)
                        {
                            <UnorderedListItem>@error</UnorderedListItem>
                        }
                    </UnorderedList>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    private VendorInput vendorInput;
    private Modal modal;
    private BaseModal baseModal;

    private Task ShowModal()
    {
        return modal.Show();
    }

    private Task HideModal()
    {
        return modal.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        vendorInput = new VendorInput();
        baseModal = new BaseModal();
        baseModal.Errors = new List<string>();
    }

    public async Task SubmitVendorInput()
    {
        baseModal = await vendorService.SubmitVendorInput(vendorInput);

        ShowModal();

        if (baseModal.Success)
        {
            vendorInput = new VendorInput();
        }
    }
}