@page "/administration/guestmanagement"
@using EventsManagementInterface.Data.Models;
@using EventsManagementInterface.Data.Models.Attendee;
@using EventsManagementInterface.Data.Services
@inject AdministrationService administrationService

<PageTitle>Guest Management</PageTitle>
<h1 class="mb-5">Guest Management</h1>
<div class="row">
    <div class="card-custom mb-3 p-3">
            @*<input type="text" class="form-control" @bind="searchQuery" @bind:event="oninput" @onkeyup="SearchTable" placeholder="Search..."></input>*@
            <div class="table-responsive">
                <table class="table table-striped">

                    <thead>
                        <tr>
                            <th></th>
                            <th @onclick='() => FilterTable("GIN")' class="column-sorted"><span class="oi oi-arrow-top"></span> GIN</th>
                            <th @onclick='() => FilterTable("EMAIL")' class="column-sorted"><span class="oi oi-arrow-top"></span> Email Address</th>
                            <th @onclick='() => FilterTable("FIRSTNAME")' class="column-sorted"><span class="oi oi-arrow-top"></span> First Name</th>
                            <th @onclick='() => FilterTable("LASTNAME")' class="column-sorted"><span class="oi oi-arrow-top"></span> Last Name</th>
                            <th @onclick='() => FilterTable("INVITATION")' class="column-sorted"><span class="oi oi-arrow-top"></span> Invitation Email sent</th>
                            <th @onclick='() => FilterTable("ALCOHOLIC")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Alcoholic Drink Tokens</th>
                            <th @onclick='() => FilterTable("NONALCOHOLIC")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Non-Alcoholic Drink Tokens</th>
                            <th @onclick='() => FilterTable("FOOD")' class="column-sorted"><span class="oi oi-arrow-bottom"></span> Food Tokens</th>
                            <th></th>
                        </tr>
                    </thead>
                <tbody>

                    @foreach (var attendee in attendeeList)
                    {
                        <tr>
                            <td>@(attendeeList.IndexOf(attendee) + 1)</td>
                            <td>@attendee.GuestIdentificationNumber</td>
                            <td>@attendee.EmailAddress</td>
                            <td>@attendee.FirstName</td>
                            <td>@attendee.LastName</td>
                            <td>
                                @if (attendee.GuestIdentificationNumberEmailSent)
                                {
                                    <span class="oi oi-circle-check" style="color:green"></span>
                                }
                                else
                                {
                                    <span class="oi oi-circle-x" style="color: red"></span>
                                }
                            </td>
                            <td>@attendee.AlcoholicDrinkTokenAllowance</td>
                            <td>@attendee.NonAlcoholicDrinkTokenAllowance</td>
                            <td>@attendee.FoodTokenAllowance</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>



<Modal @ref="modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>@baseModal.Title</ModalTitle>
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel Style="font-weight:100">@baseModal.Message</FieldLabel>
            </Field>
            <Div Class="mb-2"></Div>
            @if (baseModal.Success)
            {
                @if (baseModal.TokensRemaining != null && baseModal.TokensRemaining.Count != 0)
                {
                    <Field>
                        <FieldLabel>Tokens Remaining:</FieldLabel>
                        <UnorderedList>
                            @foreach (string tokens in baseModal.TokensRemaining)
                            {
                                <UnorderedListItem>@tokens</UnorderedListItem>
                            }
                        </UnorderedList>
                    </Field>
                }
            }
            else
            {
                <Field>
                    <UnorderedList>

                        @foreach (string error in baseModal.Errors)
                        {
                            <UnorderedListItem>@error</UnorderedListItem>
                        }
                    </UnorderedList>
                </Field>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>


@code {
    private Modal modal;
    private BaseModal baseModal;
    private List<Attendee> attendeeList = new List<Attendee>();

    private Task ShowModal()
    {
        return modal.Show();
    }

    private Task HideModal()
    {
        return modal.Hide();
    }

    protected override async Task OnInitializedAsync()
    {
        baseModal = new BaseModal();
        baseModal.Errors = new List<string>();
        baseModal.TokensRemaining = new List<string>();
        attendeeList = await administrationService.GetAttendees();
    }

    private void FilterTable(string filterByProperty)
    {

        switch (filterByProperty)
        {
            case "GIN":
                attendeeList = attendeeList.OrderBy(x => x.GuestIdentificationNumber).ToList();
                break;
            case "EMAIL":
                attendeeList = attendeeList.OrderBy(x => x.EmailAddress).ToList();
                break;
            case "FIRSTNAME":
                attendeeList = attendeeList.OrderBy(x => x.FirstName).ToList();
                break;
            case "LASTNAME":
                attendeeList = attendeeList.OrderBy(x => x.LastName).ToList();
                break;
            case "INVITATION":
                attendeeList = attendeeList.OrderBy(x => x.GuestIdentificationNumberEmailSent).ToList();
                break;
            case "ALCOHOLIC":
                attendeeList = attendeeList.OrderByDescending(x => x.AlcoholicDrinkTokenAllowance).ToList();
                break;
            case "NONALCOHOLIC":
                attendeeList = attendeeList.OrderByDescending(x => x.NonAlcoholicDrinkTokenAllowance).ToList();
                break;
            case "FOOD":
                attendeeList = attendeeList.OrderByDescending(x => x.FoodTokenAllowance).ToList();
                break;
        }
    }
}
