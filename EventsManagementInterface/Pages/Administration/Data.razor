<AuthorizeView>
    @page "/administration/data"
    @using EventsManagementInterface.Data.Models.Attendee
    @using EventsManagementInterface.Data.Enums
    @using EventsManagementInterface.Data.Models.Vendor
    @inject EventsManagementInterface.Data.Services.AdministrationService administrationService
    

    <PageTitle>Data</PageTitle>
    <div class="row justify-content-around mt-2">
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-2">
            <div class="card-body-custom">
                <BarChart @ref="moneySpentChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-2">
            <div class="card-body-custom">
                <BarChart @ref="alcoholNonAlcoholChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
    </div>
    <div class="row justify-content-around">
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-2">
            <div class="card-body-custom">
                <LineChart @ref="ordersLineChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-2">
            <div class="card-body-custom">
                <DoughnutChart @ref="drinkDonutChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
    </div>
    <div class="row justify-content-around">
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-2">
            <div class="card-body-custom">
                <BarChart @ref="allowanceUsedChart" Type="ChartType.Bar" TItem="double" />
                <div class="row mb-3 mt-3">
                    <div class="form-group">
                    </div>
                </div>
            </div>
        </div>
        <div class="card-custom col-lg-5 col-md-12 col-sm-12 mb-2">
            <div class="card-body-custom">
                <DoughnutChart @ref="allowanceDonutChart" Type="ChartType.Bar" TItem="double" />
            </div>
        </div>
    </div>

    @code {
        List<Attendee> attendees = new List<Attendee>();
        List<EventsManagementInterface.Data.Models.Vendor.Order> orders = new List<EventsManagementInterface.Data.Models.Vendor.Order>();
        double alcoholicDrinkTokenAllowance = 0;
        double nonAlcoholicDrinkTokenAllowance = 0;
        double foodTokenAllowance = 0;

        string[] allowanceLabels = { "Alcohol Drink Tokens", "Non-Alcohol Drink Tokens", "Food Tokens" };
        string[] alcoholNonAlcoholLabels = { "Alcohol", "Non-Alcohol" };
        List<string> drinksLabels = new List<string>();
        List<string> ordersDateTimeLabels = new List<string>();
        BarChart<double> allowanceUsedChart = new BarChart<double>();
        BarChart<double> moneySpentChart = new BarChart<double>();
        BarChart<double> alcoholNonAlcoholChart = new BarChart<double>();
        DoughnutChart<double> drinkDonutChart = new DoughnutChart<double>();
        DoughnutChart<double> allowanceDonutChart = new DoughnutChart<double>();
        LineChart<double> ordersLineChart = new LineChart<double>();
        DateTime dateOfEvent = DateTime.ParseExact("18/09/2023 00:00", "dd/MM/yyyy HH:mm", null);

        List<string> chartBackgroundColors = new List<string>
        {
            ChartColor.FromRgba(140,55,62, 0.5f),
            ChartColor.FromRgba(188,74,60, 0.5f),
            ChartColor.FromRgba(178,34,34, 0.5f),
        };

        List<string> chartBorderColors = new List<string>
        {
            ChartColor.FromRgba(0,0,0, 1f),
        };

        protected override async Task OnInitializedAsync()
        {
        attendees = await administrationService.GetAttendees();
        orders = await administrationService.GetOrders();
        alcoholicDrinkTokenAllowance = await administrationService.GetTotalAvailableAlcoholDrinkTokens();
        nonAlcoholicDrinkTokenAllowance = await administrationService.GetTotalAvailableNonAlcoholDrinkTokens();
        foodTokenAllowance = await administrationService.GetTotalAvailableFoodTokens();

        await allowanceDonutChart.Clear();
        await allowanceUsedChart.Clear();
        await ordersLineChart.Clear();
        await drinkDonutChart.Clear();
        await moneySpentChart.Clear();
        await alcoholNonAlcoholChart.Clear();
        await allowanceDonutChart.AddLabelsDatasetsAndUpdate(allowanceLabels, GetTokenAllowanceChartDataset());
        await allowanceUsedChart.AddLabelsDatasetsAndUpdate(allowanceLabels, GetAllowanceUsedChartDataset());
        await ordersLineChart.AddLabelsDatasetsAndUpdate(ordersDateTimeLabels, GetOrdersTimeLineChartDataset());
        await drinkDonutChart.AddLabelsDatasetsAndUpdate(drinksLabels, GetDrinksChartDataset());
        await moneySpentChart.AddLabelsDatasetsAndUpdate(drinksLabels, GetMoneySpentChartDataset());
        await alcoholNonAlcoholChart.AddLabelsDatasetsAndUpdate(alcoholNonAlcoholLabels, GetAlcoholNonAlcoholChartDataset());
        }

        private BarChartDataset<double> GetMoneySpentChartDataset()
        {
        return new()
            {
                Label = "Money Spent (£)",
                Data = MoneySpentDataset(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
        }

        private BarChartDataset<double> GetAlcoholNonAlcoholChartDataset()
        {
        return new()
            {
                Label = "Drink Type (£)",
                Data = AlcoholNonAlcoholDataset(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
        }

        private BarChartDataset<double> GetAllowanceUsedChartDataset()
        {
        return new()
            {
                Label = "Allowance Used",
                Data = AlowanceUsedDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
        }

        private DoughnutChartDataset<double> GetTokenAllowanceChartDataset()
        {
        return new()
            {
                Label = "Total Remaining Allowances",
                Data = TokenAllowanceDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
        }

        private DoughnutChartDataset<double> GetDrinksChartDataset()
        {
        return new()
            {
                Label = "Drinks Ordered",
                Data = DrinksDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                BorderWidth = 3
            };
        }

        private LineChartDataset<double> GetOrdersTimeLineChartDataset()
        {
        return new LineChartDataset<double>
            {
                Label = "Orders",
                Data = OrdersTimeLineDataSet(),
                BackgroundColor = chartBackgroundColors,
                BorderColor = chartBorderColors,
                Fill = true,
                PointRadius = 3,
                CubicInterpolationMode = "monotone",
            };
        }

        public double CalculateTotalSpent(Drink drink)
        {
        double spent = 0;
        foreach (Order order in orders.Where(x => x.Name == drink.ToString()))
        {
            spent += order.Price;
        }

        return spent;
        }

        List<double> MoneySpentDataset()
        {
        return new List<double>
            {
                CalculateTotalSpent(Drink.ASPALLS_CIDER),
                CalculateTotalSpent(Drink.BACARDI),
                CalculateTotalSpent(Drink.COKE),
                CalculateTotalSpent(Drink.FRUIT_SHOOT),
                CalculateTotalSpent(Drink.GORDONS_GIN),
                CalculateTotalSpent(Drink.GORDONS_PINK_GIN),
                CalculateTotalSpent(Drink.HEINEKEN_ZERO),
                CalculateTotalSpent(Drink.JACK_DANIELS),
                CalculateTotalSpent(Drink.KOPPARBERG_MIXED_FRUITS),
                CalculateTotalSpent(Drink.LEMONADE),
                CalculateTotalSpent(Drink.MADRI_LAGER_HALF_PINT),
                CalculateTotalSpent(Drink.MADRI_LAGER_PINT),
                CalculateTotalSpent(Drink.MALIBU),
                CalculateTotalSpent(Drink.MORGANS_SPICED_RUM),
                CalculateTotalSpent(Drink.NECK_OIL_IPA_HALF_PINT),
                CalculateTotalSpent(Drink.NECK_OIL_IPA_PINT),
                CalculateTotalSpent(Drink.ORANGE),
                CalculateTotalSpent(Drink.PIMMS_AND_LEMONADE),
                CalculateTotalSpent(Drink.PROSECCO),
                CalculateTotalSpent(Drink.RED_WINE),
                CalculateTotalSpent(Drink.SMIRNOFF_RED_VODKA),
                CalculateTotalSpent(Drink.WATER),
                CalculateTotalSpent(Drink.WHITE_WINE),
                CalculateTotalSpent(Drink.WHITLEY_NEILL_SELECTION),
            };
        }

        List<double> AlcoholNonAlcoholDataset()
        {
            double alcoholTotal = 0;
            double nonAlcoholTotal = 0;

            foreach (Order order in orders)
            {
                if (order.Type == OrderType.ALCOHOL)
                {
                    alcoholTotal += order.Price;
                }

                if (order.Type == OrderType.NON_ALCOHOL)
                {
                    nonAlcoholTotal += order.Price;
                }
            }

            return new List<double>
            {
                alcoholTotal,
                nonAlcoholTotal
            };
        }
        
        List<double> AlowanceUsedDataSet()
        {
            double alcoholTokensUsed = 0;
            double nonAlcoholTokensUsed = 0;
            double foodTokensUsed = 0;

            foreach (Order order in orders)
            {
                if (order.Type == OrderType.ALCOHOL)
                {
                    alcoholTokensUsed++;
                }

                if (order.Type == OrderType.NON_ALCOHOL)
                {
                    nonAlcoholTokensUsed++;
                }

                if (order.Type == OrderType.FOOD)
                {
                    foodTokensUsed++;
                }
            }

            return new List<double>
            {
                alcoholTokensUsed,
                nonAlcoholTokensUsed,
                foodTokensUsed
            };
        }

        List<double> TokenAllowanceDataSet()
        {
            return new List<double>
            {
                administrationService.GetTotalAvailableAlcoholDrinkTokens().Result,
                administrationService.GetTotalAvailableNonAlcoholDrinkTokens().Result,
                administrationService.GetTotalAvailableFoodTokens().Result,
            };
        }

        List<double> DrinksDataSet()
        {
            System.Globalization.TextInfo textInfo = new System.Globalization.CultureInfo("en-US", false).TextInfo;
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.ASPALLS_CIDER.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.BACARDI.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.COKE.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.FRUIT_SHOOT.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.GORDONS_GIN.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.GORDONS_PINK_GIN.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.HEINEKEN_ZERO.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.JACK_DANIELS.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.KOPPARBERG_MIXED_FRUITS.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.LEMONADE.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.MADRI_LAGER_HALF_PINT.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.MADRI_LAGER_PINT.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.MALIBU.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.MORGANS_SPICED_RUM.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.NECK_OIL_IPA_HALF_PINT.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.NECK_OIL_IPA_PINT.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.ORANGE.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.PIMMS_AND_LEMONADE.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.PROSECCO.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.RED_WINE.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.SMIRNOFF_RED_VODKA.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.WATER.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.WHITE_WINE.ToString().Replace("_", " ").ToLower()));
            drinksLabels.Add(textInfo.ToTitleCase(EventsManagementInterface.Data.Enums.Drink.WHITLEY_NEILL_SELECTION.ToString().Replace("_", " ").ToLower()));

            return new List<double>
            {
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.ASPALLS_CIDER.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.BACARDI.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.COKE.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.FRUIT_SHOOT.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.GORDONS_GIN.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.GORDONS_PINK_GIN.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.HEINEKEN_ZERO.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.JACK_DANIELS.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.KOPPARBERG_MIXED_FRUITS.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.LEMONADE.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.MADRI_LAGER_HALF_PINT.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.MADRI_LAGER_PINT.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.MALIBU.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.MORGANS_SPICED_RUM.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.NECK_OIL_IPA_HALF_PINT.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.NECK_OIL_IPA_PINT.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.ORANGE.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.PIMMS_AND_LEMONADE.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.PROSECCO.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.RED_WINE.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.SMIRNOFF_RED_VODKA.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.WATER.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.WHITE_WINE.ToString()).Count(),
                orders.Where(x => x.Name == EventsManagementInterface.Data.Enums.Drink.WHITLEY_NEILL_SELECTION.ToString()).Count(),
            };
        }

        List<double> OrdersTimeLineDataSet()
        {
        List<double> contentTimeLine = new List<double>();

        for (DateTime time = dateOfEvent.AddHours(-18); time < dateOfEvent; time = time.AddHours(1))
        {
            string copyTime = time.ToString("HH:mm");
            ordersDateTimeLabels.Add(copyTime);
        }

        foreach (string time in ordersDateTimeLabels)
        {
            DateTime dateAdjusted = DateTime.Parse(time);
            var order = orders.Where(x => x.CreatedDateTime.AddHours(1).TimeOfDay.Hours == dateAdjusted.Hour && x.CreatedDateTime.Date == dateAdjusted.Date).ToList();
            contentTimeLine.Add(order.Count);
        }
        return contentTimeLine;
        }
    }

</AuthorizeView>